service: obsidian-web-clipper

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  versionFunctions: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 60
  memorySize: 2048
  logRetentionInDays: 14
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'application/octet-stream'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: "arn:aws:s3:::${self:custom.bucket}/*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"
  environment:
    SUPABASE_URL: ${env:SUPABASE_URL}
    SUPABASE_ANON_KEY: ${env:SUPABASE_ANON_KEY}
    SCRAPER_TIMEOUT: ${env:SCRAPER_TIMEOUT, '30000'}
    SCRAPER_USER_AGENT: ${env:SCRAPER_USER_AGENT, 'Mozilla/5.0 (compatible; ContentAutomationBot/1.0)'}
    SCRAPER_MAX_RETRIES: ${env:SCRAPER_MAX_RETRIES, '3'}
    SCRAPER_VIEWPORT_WIDTH: ${env:SCRAPER_VIEWPORT_WIDTH, '1920'}
    SCRAPER_VIEWPORT_HEIGHT: ${env:SCRAPER_VIEWPORT_HEIGHT, '1080'}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  api:
    handler: src/lambda/api-handler.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      NODE_OPTIONS: --enable-source-maps

custom:
  bucket: ${self:service}-${self:provider.stage}-storage
  bundle:
    sourcemaps: true
    minify: true
    externals:
      - chrome-aws-lambda
      - puppeteer-core
      - aws-lambda
    forceInclude:
      - readability
      - turndown
      - cheerio
    ignorePackages:
      - fsevents
    copyFiles:
      - from: node_modules/chrome-aws-lambda/bin
        to: bin

resources:
  Resources:
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

functions:
  scraper:
    handler: src/lambda/scraper-handler.handler
    events:
      - http:
          path: scrape
          method: post
          cors: true
          request:
            schemas:
              application/json:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  template:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                required:
                  - url
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 60
    memorySize: 2048
    reservedConcurrency: 5

  automation:
    handler: src/lambda/automation-handler.handler
    events:
      - http:
          path: automation
          method: post
          cors: true
          request:
            schemas:
              application/json:
                type: object
                properties:
                  action:
                    type: string
                    enum: [schedule, process, initialize]
                  url:
                    type: string
                    format: uri
                  scheduledDate:
                    type: string
                    format: date-time
                  options:
                    type: object
                required:
                  - action
      - schedule:
          rate: rate(1 hour)
          input:
            action: process
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 300
    memorySize: 2048
  trends:
    handler: src/lambda/trends-handler.handler
    events:
      - http:
          path: trends
          method: post
          cors: true
          request:
            schemas:
              application/json:
                type: object
                properties:
                  geo:
                    type: string
                    pattern: '^[A-Z]{2}$'
                  category:
                    type: string
                    enum: [all, business, entertainment, health, science, sports, technology]
      - schedule:
          rate: rate(6 hours)
          input:
            geo: 'US'
            category: 'all'
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 60
    memorySize: 1024

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-prune-plugin

custom:
  bundle:
    sourcemaps: true
    minify: true
    concurrency: 5
    linting: false
    externals:
      - playwright-core
    ignorePackages:
      - fsevents
    forceInclude:
      - readability
      - turndown
      - cheerio
  prune:
    automatic: true
    number: 3
  dotenv:
    path: .env
    include:
      - SUPABASE_URL
      - SUPABASE_ANON_KEY
      - SCRAPER_.*