service: obsidian-web-clipper

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  timeout: 30
  memorySize: 2048
  logRetentionInDays: 14
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256
  environment:
    # Supabase
    SUPABASE_URL: ${env:SUPABASE_URL}
    SUPABASE_ANON_KEY: ${env:SUPABASE_ANON_KEY}
    
    # Server
    PORT: ${env:PORT, '3000'}
    
    # Scraper
    SCRAPER_TIMEOUT: ${env:SCRAPER_TIMEOUT, '30000'}
    SCRAPER_USER_AGENT: ${env:SCRAPER_USER_AGENT, 'Mozilla/5.0 (compatible; ContentAutomationBot/1.0)'}
    SCRAPER_MAX_RETRIES: ${env:SCRAPER_MAX_RETRIES, '3'}
    SCRAPER_SCROLL_TIMEOUT: ${env:SCRAPER_SCROLL_TIMEOUT, '3000'}
    SCRAPER_VIEWPORT_WIDTH: ${env:SCRAPER_VIEWPORT_WIDTH, '1920'}
    SCRAPER_VIEWPORT_HEIGHT: ${env:SCRAPER_VIEWPORT_HEIGHT, '1080'}
    
    # Content
    MAX_CONTENT_LENGTH: ${env:MAX_CONTENT_LENGTH, '1000000'}
    DEFAULT_CONTENT_TYPE: ${env:DEFAULT_CONTENT_TYPE, 'blog_post'}
    
    # API
    API_RATE_LIMIT: ${env:API_RATE_LIMIT, '100'}
    API_TIMEOUT: ${env:API_TIMEOUT, '5000'}
    API_MAX_BODY_SIZE: ${env:API_MAX_BODY_SIZE, '10mb'}
    
    # Security
    ALLOWED_ORIGINS: ${env:ALLOWED_ORIGINS, 'http://localhost:3000'}
    ENABLE_RATE_LIMITING: ${env:ENABLE_RATE_LIMITING, 'true'}
    MAX_REQUEST_SIZE: ${env:MAX_REQUEST_SIZE, '50mb'}
    
    # Content Discovery
    MAX_URLS_PER_TREND: ${env:MAX_URLS_PER_TREND, '10'}
    MIN_URL_SCORE: ${env:MIN_URL_SCORE, '5.0'}
    CONTENT_TYPES: ${env:CONTENT_TYPES, 'review,comparison,tutorial,guide'}
    
    # AWS
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'application/octet-stream'

package:
  individually: true
  patterns:
    - '!**'
    - 'package.json'
    - 'package-lock.json'
    - 'src/lambda/**'
    - 'src/services/**'
    - 'node_modules/**'
    - '!node_modules/.bin/**'
    - '!node_modules/**/test/**'
    - '!node_modules/**/tests/**'
    - '!node_modules/**/example/**'
    - '!node_modules/**/examples/**'
    - '!node_modules/**/doc/**'
    - '!node_modules/**/docs/**'
    - '!node_modules/**/*.d.ts'
    - '!node_modules/**/*.md'
    - '!node_modules/**/*.map'

functions:
  api:
    handler: src/lambda/api-handler.handler
    package:
      patterns:
        - 'src/lambda/api-handler.js'
        - 'src/services/**'
        - 'node_modules/@supabase/**'
        - 'node_modules/node-fetch/**'
    events:
      - http:
          path: /
          method: ANY
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: false
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: false
    environment:
      NODE_OPTIONS: --enable-source-maps

  scraper:
    handler: src/lambda/scraper-handler.handler
    package:
      patterns:
        - 'src/lambda/scraper-handler.js'
        - 'src/services/**'
        - 'node_modules/cheerio/**'
        - 'node_modules/@mozilla/**'
        - 'node_modules/turndown/**'
        - 'node_modules/sanitize-html/**'
        - 'node_modules/jsdom/**'
        - 'node_modules/natural/**'
        - 'node_modules/node-fetch/**'
        - 'node_modules/slugify/**'
        - 'node_modules/@supabase/**'
    events:
      - http:
          path: scrape
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: false
          request:
            schemas:
              application/json:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  template:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                required:
                  - url
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 30
    memorySize: 2048

  automation:
    handler: src/lambda/automation-handler.handler
    package:
      patterns:
        - 'src/lambda/automation-handler.js'
        - 'src/services/**'
        - 'node_modules/@supabase/**'
        - 'node_modules/node-fetch/**'
    events:
      - http:
          path: automation
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: false
          request:
            schemas:
              application/json:
                type: object
                properties:
                  action:
                    type: string
                    enum: [schedule, process, initialize]
                  url:
                    type: string
                    format: uri
                  scheduledDate:
                    type: string
                    format: date-time
                  options:
                    type: object
                required:
                  - action
      - schedule:
          rate: rate(1 hour)
          input:
            action: process
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 30
    memorySize: 2048

  trends:
    handler: src/lambda/trends-handler.handler
    package:
      patterns:
        - 'src/lambda/trends-handler.js'
        - 'src/services/**'
        - 'node_modules/@supabase/**'
        - 'node_modules/node-fetch/**'
    events:
      - http:
          path: trends
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: false
          request:
            schemas:
              application/json:
                type: object
                properties:
                  geo:
                    type: string
                    pattern: '^[A-Z]{2}$'
                  category:
                    type: string
                    enum: [all, business, entertainment, health, science, sports, technology]
      - schedule:
          rate: rate(6 hours)
          input:
            geo: 'US'
            category: 'all'
    environment:
      NODE_OPTIONS: --enable-source-maps
    timeout: 30
    memorySize: 1024

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3
  dotenv:
    path: .env
    include:
      # Supabase
      - SUPABASE_URL
      - SUPABASE_ANON_KEY
      
      # Server
      - PORT
      
      # Scraper
      - SCRAPER_TIMEOUT
      - SCRAPER_USER_AGENT
      - SCRAPER_MAX_RETRIES
      - SCRAPER_SCROLL_TIMEOUT
      - SCRAPER_VIEWPORT_WIDTH
      - SCRAPER_VIEWPORT_HEIGHT
      
      # Content
      - MAX_CONTENT_LENGTH
      - DEFAULT_CONTENT_TYPE
      
      # API
      - API_RATE_LIMIT
      - API_TIMEOUT
      - API_MAX_BODY_SIZE
      
      # Security
      - ALLOWED_ORIGINS
      - ENABLE_RATE_LIMITING
      - MAX_REQUEST_SIZE
      
      # Content Discovery
      - MAX_URLS_PER_TREND
      - MIN_URL_SCORE
      - CONTENT_TYPES

resources:
  Resources:
    ScraperLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-scraper
        RetentionInDays: 14
    TrendsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-trends
        RetentionInDays: 14
    AutomationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-automation
        RetentionInDays: 14